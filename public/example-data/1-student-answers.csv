Student Number,Question 1 Answer,Question 2 Answer
3439853985,"The Singleton design pattern restricts the instantiation of a class to one ""single"" instance and provides a global point of access to that instance. This pattern is used when exactly one object is needed to coordinate actions across the system. For instance, a Singleton can be used for a configuration manager that reads configuration settings from a file and provides these settings throughout the application. This solves the problem of ensuring that there is only one instance of the configuration manager, thereby preventing conflicting updates or redundant reads from the configuration file. The typical implementation involves making the class constructor private, defining a private static variable to hold the single instance, and providing a public static method that returns this instance. This method initializes the instance if it doesn’t already exist. For example, in a web application, a Singleton pattern can be used for a database connection pool manager to ensure all parts of the application share the same connection pool, improving resource utilization and management.","Imperative programming is about giving commands to the computer, while declarative programming is about stating what you want to happen. Imperative languages include C and Java, while SQL is declarative. Imperative is more detailed; declarative is more abstract."
5439753497,"The Singleton design pattern restricts the instantiation of a class to a single object. It solves the issue of needing a single instance of a class to control access to resources. Typically, it’s implemented by making the constructor private and providing a static method that returns the single instance. This pattern is useful in scenarios like managing a connection to a database, where only one connection should be open at a time.","The imperative and declarative computational models represent two fundamentally different approaches to programming. Imperative Programming: In this model, the programmer explicitly defines how the computer should perform tasks. It focuses on describing the control flow (the "how") by specifying a sequence of instructions that change the program's state step-by-step. Languages like C, Java, and Python are examples of imperative languages. In imperative programming, loops, conditionals, and state changes are central, providing fine-grained control over the program's execution. Declarative Programming: In contrast, declarative programming focuses on what the desired outcome is rather than how to achieve it. Instead of detailing the control flow, the programmer describes the desired results, and the underlying system determines how to achieve those results. SQL, HTML, and Prolog are examples of declarative languages. Declarative programming often leads to more concise and readable code, as it abstracts away the control flow details."
7569093434,"The Singleton pattern ensures a class has a single instance and provides a global access point to it. This is useful for classes that manage resources or configurations. To implement it, you make the constructor private and create a static method that returns the instance. For example, a logging class could use this pattern to ensure all messages are written to the same log file.","Imperative and declarative programming are two different ways to write code. In imperative programming, you tell the computer exactly what to do step by step. For example, in C, you would write a loop to iterate over an array. This gives you a lot of control but can make the code harder to understand and maintain. Declarative programming, on the other hand, is about describing what you want to achieve. SQL is a good example because you describe the data you want, and the system figures out how to get it. This can make your code shorter and easier to read, but you give up control over how the tasks are executed. Both models have their uses, but imperative programming is generally better when you need detailed control, while declarative programming is better for readability and simplicity."
4387539487,"The Singleton design pattern ensures that a class has only one instance and provides a global access point to that instance. This pattern is used to control access to shared resources and to avoid the overhead of creating multiple instances. The Singleton is typically implemented by making the class constructor private and providing a static method that returns the single instance of the class. This static method usually checks if the instance already exists and creates it if not. An example scenario would be a logging class that needs to write log messages to a single log file. Using a Singleton ensures all parts of the application use the same logger instance, maintaining consistency and preventing issues with concurrent file access.","The imperative model is where you tell the computer how to do something, and the declarative model is where you tell it what you want done. Imperative languages include C and Java, while SQL and HTML are declarative. Imperative programming gives you control but can be harder to manage in big projects. Declarative programming is easier to read but might not be as efficient."
3409750397,"The Singleton design pattern makes sure only one instance of a class exists. It solves the problem of having multiple instances when only one is needed. A database connection can be an example.","Imperative programming is when you tell the computer how to do things step by step. Declarative programming is when you tell it what you want, and it figures out how to do it. Examples are C for imperative and SQL for declarative."
